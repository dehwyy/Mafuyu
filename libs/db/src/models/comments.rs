//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "comments")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(unique)]
    pub author_id: Uuid,
    pub images: Option<Vec<String>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_liked_comments::Entity")]
    UserLikedComments,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AuthorId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::user_liked_comments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserLikedComments.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_liked_comments::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_liked_comments::Relation::Comments.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
